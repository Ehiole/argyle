ns <- apply(gty, 2, function(x) sum(is.na(x)))
hs <- apply(gty, 2, function(x) sum(x == 1, na.rm = TRUE))
ys <- apply(subset(gty, chr == "Y" | chr == "chrY"), 2,
function(x) sum(x != 1 & !is.na(x)))
}
return(cbind(N = ns, H = hs, chrY = ys))
}
rez <- summarize.calls(geno)
head(rez)
summarize.calls <- function(gty, ...) {
if (!inherits(gty, "genotypes"))
stop("Please supply an object of class 'genotypes'.")
if (is.character(gty)) {
gty[ gty == "N" ] <- NA
ns <- apply(gty, 2, function(x) sum(is.na(x)))
hs <- apply(gty, 2, function(x) sum(x == "H", na.rm = TRUE))
ys <- apply(subset(gty, chr == "Y" | chr == "chrY"), 2,
function(x) sum(x %in% c("A","C","G","T")))
}
else {
ns <- apply(gty, 2, function(x) sum(is.na(x)))
hs <- apply(gty, 2, function(x) sum(x == 1, na.rm = TRUE))
ys <- apply(subset(gty, chr == "Y" | chr == "chrY"), 2,
function(x) sum(x != 1 & !is.na(x)))
}
return(data.frame(id = colnames(geno), N = ns, H = hs, chrY = ys))
}
rez <- summarize.calls(geno)
head(rez)
ggplot(rez) + geom_point(aes(x = N, y = H))
ggplot(rez) + geom_text(aes(x = N, y = H, label = id))
ggplot(rez) + geom_density(aes(x = N)) + geom_density(aes(x = H))
.snps <- subset(snps, chr == "chr1" | chr == "chrY")
geno <- geno.to.matrix(intens, .snps)
x <- geno.to.matrix(intens, .snps, value.col = "x")
y <- geno.to.matrix(intens, .snps, value.col = "y")
attr(geno, "intensity") <- list(x = x, y = y)
summarize.calls <- function(gty, ...) {
if (!inherits(gty, "genotypes"))
stop("Please supply an object of class 'genotypes'.")
if (is.character(gty)) {
gty[ gty == "N" ] <- NA
ns <- apply(gty, 2, function(x) sum(is.na(x)))
hs <- apply(gty, 2, function(x) sum(x == "H", na.rm = TRUE))
ys <- apply(subset(gty, chr == "Y" | chr == "chrY"), 2,
function(x) sum(x %in% c("A","C","G","T")))
}
else {
ns <- apply(gty, 2, function(x) sum(is.na(x)))
hs <- apply(gty, 2, function(x) sum(x == 1, na.rm = TRUE))
ys <- apply(subset(gty, chr == "Y" | chr == "chrY"), 2,
function(x) sum(x != 1 & !is.na(x)))
}
return(data.frame(id = colnames(geno), N = ns, H = hs, chrY = ys))
}
rez <- summarize.calls(geno)
head(rez)
hist(rez$chrY)
plot(sort((rez$chrY))
plot(sort((rez$chrY)))
y <- summarize.intensity(subset(geno, chr == "chrY"))
head(y)
ggplot(y) + geom_line(aes(x = id, y = value, colour = q, group = q)) + theme_slanty_x()
ggplot(y) + geom_line(aes(x = reorder(id, value, quantile, 0.25), y = value, colour = q, group = q)) + theme_slanty_x()
summarize.calls <- function(gty, by = c("samples","markers"), ...) {
if (!inherits(gty, "genotypes"))
stop("Please supply an object of class 'genotypes'.")
by <- match.arg(by)
if (by == "samples")
which.dim <- 2
else
which.dim <- 1
if (is.character(gty)) {
gty[ gty == "N" ] <- NA
ns <- apply(gty, which.dim, function(x) sum(is.na(x)))
hs <- apply(gty, which.dim, function(x) sum(x == "H", na.rm = TRUE))
}
else {
ns <- apply(gty, which.dim, function(x) sum(is.na(x)))
hs <- apply(gty, which.dim, function(x) sum(x == 1, na.rm = TRUE))
}
if (by == "samples")
return(data.frame(id = colnames(geno), N = ns, H = hs))
else
return(data.frame(marker = rownames(geno), N = ns, H = hs))
}
x <- summarize.calls(geno, "samples")
y <- summarize.calls(geno "markers")
y <- summarize.calls(geno, "markers")
head(y)
ggplot(y) + geom_point(aes(x = N, y = H))
y <- summarize.calls(subset(geno, chr == "chr1"), "markers")
summarize.calls <- function(gty, by = c("samples","markers"), ...) {
if (!inherits(gty, "genotypes"))
stop("Please supply an object of class 'genotypes'.")
by <- match.arg(by)
if (by == "samples")
which.dim <- 2
else
which.dim <- 1
if (is.character(gty)) {
gty[ gty == "N" ] <- NA
ns <- apply(gty, which.dim, function(x) sum(is.na(x)))
hs <- apply(gty, which.dim, function(x) sum(x == "H", na.rm = TRUE))
}
else {
ns <- apply(gty, which.dim, function(x) sum(is.na(x)))
hs <- apply(gty, which.dim, function(x) sum(x == 1, na.rm = TRUE))
}
if (by == "samples")
return(data.frame(id = colnames(gty), N = ns, H = hs))
else
return(data.frame(marker = rownames(gty), N = ns, H = hs))
}
y <- summarize.calls(subset(geno, chr == "chr1"), "markers")
ggplot(y) + geom_point(aes(x = N, y = H))
?ks.test
ks.test(rnorm(1000), rnorm(10))
ref <- summarize.intensity(geno[ ,1 ])
ref
ref <- summarize.intensity(geno[ ,1 ], q = seq(0,1,0.01)
ref <- summarize.intensity(geno[ ,1 ], q = seq(0,1,0.01))
str(ks.test(rnorm(1000), rnorm(10)))
samples.vs.refdist <- function(gty, ref, ...) {
if (!inherits(gty, "genotypes") && .has.valid.intensity(gty))
stop("Please supply an object of class 'genotypes' with valid intensity information.")
.colwise.ks <- function(x, y) {
ks.test(x, y)$statistic
}
apply(gty, 2, ks.test, y = ref)
}
samples.vs.refdist(geno, ref)
ref
samples.vs.refdist(geno, ref[,3])
samples.vs.refdist <- function(gty, ref, ...) {
if (!inherits(gty, "genotypes") && .has.valid.intensity(gty))
stop("Please supply an object of class 'genotypes' with valid intensity information.")
.colwise.ks <- function(x, y) {
ks.test(x, y)$statistic
}
si <- with(attr(gty, "intensity"), sqrt(x^2+y^2))
apply(si, 2, ks.test, y = ref)
}
samples.vs.refdist(geno, ref[,3])
samples.vs.refdist <- function(gty, ref, ...) {
if (!inherits(gty, "genotypes") && .has.valid.intensity(gty))
stop("Please supply an object of class 'genotypes' with valid intensity information.")
.colwise.ks <- function(x, y) {
ks.test(x, y)$statistic
}
si <- with(attr(gty, "intensity"), sqrt(x^2+y^2))
apply(si, 2, .colwise.ks, y = ref)
}
samples.vs.refdist(geno, ref[,3])
warnings()
ks <- samples.vs.refdist(geno, ref[,3])
hist(ks)
ks[ ks > quantile(ks, 0.8) ]
ks[ ks > 0.2 ]
ks <- samples.vs.refdist(geno, attr(geno, "intensity")$x[ ,1 ])
hist(ks)
colnames(geno)
colnames(geno)[]
colnames(geno)[1]
colnames(geno)[1:2]
colnames(geno)[1:3]
colnames(geno)[1:5]
ks <- samples.vs.refdist(geno, attr(geno, "intensity")$x[ ,c(1,3,4) ])
hist(ks)
ks[ ks > 0.4 ]
sort(ks)
as.matrix(sort(ks))
samples.vs.refdist <- function(gty, ref, ...) {
if (!inherits(gty, "genotypes") && .has.valid.intensity(gty))
stop("Please supply an object of class 'genotypes' with valid intensity information.")
.colwise.ks <- function(x, y) {
ks.test(x, y, alternative = "less")$statistic
}
si <- with(attr(gty, "intensity"), sqrt(x^2+y^2))
apply(si, 2, .colwise.ks, y = ref)
}
ks <- samples.vs.refdist(geno, attr(geno, "intensity")$x[ ,c(1,3,4) ])
plot(sort(ks))
rm(samples.vs.refdist)
## apply Kolmogorov-Smirnov test for equality of distribution between sum-intensity of each sample
## and some appropriate reference (NB: choice of reference is important)
intensity.vs.ref <- function(gty, ref, ...) {
if (!inherits(gty, "genotypes") && .has.valid.intensity(gty))
stop("Please supply an object of class 'genotypes' with valid intensity information.")
.colwise.ks <- function(x, y) {
ks.test(x, y, alternative = "less")$statistic
}
si <- with(attr(gty, "intensity"), sqrt(x^2+y^2))
apply(si, 2, .colwise.ks, y = ref)
}
run.qc.checks <- function(gty, ref.intensity = NULL,
max.H = Inf, max.N = Inf, max.D = Inf, min.D = Inf, ...) {
if (!inherits(gty, "genotypes"))
stop("Please supply an object of class 'genotypes'.")
sites <- rep(FALSE, nrow(gty))
samples <- rep(FALSE, ncol(gty))
if (!is.null(attr(gty, "filter.sites")))
sites <- attr(gty, "filter.sites")
if (!is.null(attr(gty, "filter.samples")))
samples <- attr(gty, "filter.samples")
if (length(sites) != nrow(gty))
warning("Site filters don't match dimensions of genotype matrix.")
if (length(samples) != ncol(gty))
warning("Sample filters don't match dimensions of genotype matrix.")
qc.rez <- list()
message("Performing QC checks on genotype calls...")
qc.rez$calls <- summarize.calls(gty, "samples")
samples <- samples | with(qc.rez$calls, H > max.H | N > max.N)
if (.has.valid.intensity(gty)) {
message("Performing QC checks on hybridization intensities...")
qc.rez$intensity <- summarize.intensity(gty, q = seq(0.05, 0.95, 0.05))
if (!is.null(ref.intensity)) {
qc.rez$D <- intensity.vs.ref(gty, ref.intensity)
samples <- samples | (qc.rez$D > max.D | qc.rez$D < min.D)
}
}
message(paste(sum(sites),"sites and", sum(samples), "now flagged as low-quality."))
class(qc.rez) <- c("QC.result", class(qc.rez))
return(qc.rez)
}
run.qc.checks(geno, max.H = 5000, max.N = 3000)
rez <- run.qc.checks(geno, max.H = 5000, max.N = 3000)
run.qc.checks <- function(gty, ref.intensity = NULL,
max.H = Inf, max.N = Inf, max.D = Inf, min.D = Inf, ...) {
if (!inherits(gty, "genotypes"))
stop("Please supply an object of class 'genotypes'.")
sites <- rep(FALSE, nrow(gty))
samples <- rep(FALSE, ncol(gty))
if (!is.null(attr(gty, "filter.sites")))
sites <- attr(gty, "filter.sites")
if (!is.null(attr(gty, "filter.samples")))
samples <- attr(gty, "filter.samples")
if (length(sites) != nrow(gty))
warning("Site filters don't match dimensions of genotype matrix.")
if (length(samples) != ncol(gty))
warning("Sample filters don't match dimensions of genotype matrix.")
qc.rez <- list()
message("Performing QC checks on genotype calls...")
qc.rez$calls <- summarize.calls(gty, "samples")
samples <- samples | with(qc.rez$calls, H > max.H | N > max.N)
if (.has.valid.intensity(gty)) {
message("Performing QC checks on hybridization intensities...")
qc.rez$intensity <- summarize.intensity(gty, q = seq(0.05, 0.95, 0.05))
if (!is.null(ref.intensity)) {
qc.rez$D <- intensity.vs.ref(gty, ref.intensity)
samples <- samples | (qc.rez$D > max.D | qc.rez$D < min.D)
}
}
message(paste(sum(sites),"sites and", sum(samples), "samples now flagged as low-quality."))
class(qc.rez) <- c("QC.result", class(qc.rez))
return(qc.rez)
}
rez <- run.qc.checks(geno, max.H = 5000, max.N = 2000)
dim(rez)
run.qc.checks <- function(gty, ref.intensity = NULL,
max.H = Inf, max.N = Inf, max.D = Inf, min.D = Inf, ...) {
if (!inherits(gty, "genotypes"))
stop("Please supply an object of class 'genotypes'.")
sites <- rep(FALSE, nrow(gty))
samples <- rep(FALSE, ncol(gty))
if (!is.null(attr(gty, "filter.sites")))
sites <- attr(gty, "filter.sites")
if (!is.null(attr(gty, "filter.samples")))
samples <- attr(gty, "filter.samples")
if (length(sites) != nrow(gty))
warning("Site filters don't match dimensions of genotype matrix.")
if (length(samples) != ncol(gty))
warning("Sample filters don't match dimensions of genotype matrix.")
qc.rez <- list()
message("Performing QC checks on genotype calls...")
qc.rez$calls <- summarize.calls(gty, "samples")
samples <- samples | with(qc.rez$calls, H > max.H | N > max.N)
if (.has.valid.intensity(gty)) {
message("Performing QC checks on hybridization intensities...")
qc.rez$intensity <- summarize.intensity(gty, q = seq(0.05, 0.95, 0.05))
if (!is.null(ref.intensity)) {
qc.rez$D <- intensity.vs.ref(gty, ref.intensity)
samples <- samples | (qc.rez$D > max.D | qc.rez$D < min.D)
}
}
message(paste(sum(sites),"sites and", sum(samples), "samples now flagged as low-quality."))
class(qc.rez) <- c("QC.result", class(qc.rez))
attr(gty, "qc") <- qc.rez
attr(gty, "filter.sites") <- sites
attr(gty, "filter.samples") <- samples
return(gty)
}
rez <- run.qc.checks(geno, max.H = 5000, max.N = 2000)
dim(rez)
dim(gty)
dim(geno)
apply.filters <- function(gty, apply.to = c("both","samples","markers"), ...) {
if (!inherits(gty, "genotypes"))
stop("Please supply an object of class 'genotypes'.")
do.samples <- FALSE
do.sites <- FALSE
apply.to <- match.arg(apply.to)
if (apply.to == "both") {
do.samples <- TRUE
do.sites <- TRUE
}
else if (apply.to == "samples")
do.samples <- TRUE
else
do.sites <- TRUE
if (!any(do.sites, do.samples)) {
message("Nothing to do; this code should never be reached.")
return(gty)
}
if (do.sites) {
if (!is.null(attr(gty, "filter.sites"))) {
sites <- attr(gty, "filter.sites")
if (length(sites) != nrow(gty))
warning("Site filters don't match dimensions of genotype matrix.")
}
}
else {
sites <- FALSE
}
if (do.samples) {
if (!is.null(attr(gty, "filter.samples"))) {
samples <- attr(gty, "filter.samples")
if (length(samples) != ncol(gty))
warning("Sample filters don't match dimensions of genotype matrix.")
}
}
else {
samples <- FALSE
}
message(paste("Dropping", sum(sites), "markers and", sum(samples), "samples..."))
return( gty[ !sites,!samples ] )
}
names(attribtes(rez))
names(attributes(rez))
dim(geno)
dim(apply.filters(geno))
apply.filters <- function(gty, apply.to = c("both","samples","markers"), ...) {
if (!inherits(gty, "genotypes"))
stop("Please supply an object of class 'genotypes'.")
do.samples <- FALSE
do.sites <- FALSE
apply.to <- match.arg(apply.to)
if (apply.to == "both") {
do.samples <- TRUE
do.sites <- TRUE
}
else if (apply.to == "samples")
do.samples <- TRUE
else
do.sites <- TRUE
if (!any(do.sites, do.samples)) {
message("Nothing to do; this code should never be reached.")
return(gty)
}
sites <- FALSE
samples <- FALSE
if (do.sites) {
if (!is.null(attr(gty, "filter.sites"))) {
sites <- attr(gty, "filter.sites")
if (length(sites) != nrow(gty))
warning("Site filters don't match dimensions of genotype matrix.")
}
}
if (do.samples) {
if (!is.null(attr(gty, "filter.samples"))) {
samples <- attr(gty, "filter.samples")
if (length(samples) != ncol(gty))
warning("Sample filters don't match dimensions of genotype matrix.")
}
}
message(paste("Dropping", sum(sites), "markers and", sum(samples), "samples..."))
return( gty[ !sites,!samples ] )
}
dim(apply.filters(geno))
attr(geno, "filter.samples")
attr(geno, "filter.sites")
dim(apply.filters(rez))
attr(rez, "filter.sites")
get.filters <- function(gty, ...) {
if (!inherits(gty, "genotypes"))
stop("Please supply an object of class 'genotypes'.")
sites <- rep(FALSE, nrow(gty))
samples <- rep(FALSE, ncol(gty))
if (!is.null(attr(gty, "filter.samples")))
samples <- attr(gty, "filter.samples")
if (!is.null(attr(gty, "filter.sites")))
samples <- attr(gty, "filter.sites")
names(samples) <- colnames(geno)
names(sites) <- rownames(geno)
return(list(samples = samples, sites = sites))
}
get.filters <- function(gty, ...) {
if (!inherits(gty, "genotypes"))
stop("Please supply an object of class 'genotypes'.")
sites <- rep(FALSE, nrow(gty))
samples <- rep(FALSE, ncol(gty))
if (!is.null(attr(gty, "filter.samples")))
samples <- attr(gty, "filter.samples")
if (!is.null(attr(gty, "filter.sites")))
samples <- attr(gty, "filter.sites")
names(samples) <- colnames(geno)
names(sites) <- rownames(geno)
return(list(samples = samples, sites = sites))
}
summarize.filters <- function(gty, ...) {
filters <- get.filters(gty)
sapply(filters, sum, na.rm = TRUE)
}
summarize.filters(rez)
summarize.filters(geno)
get.filters <- function(gty, ...) {
if (!inherits(gty, "genotypes"))
stop("Please supply an object of class 'genotypes'.")
sites <- rep(FALSE, nrow(gty))
samples <- rep(FALSE, ncol(gty))
if (!is.null(attr(gty, "filter.samples")))
samples <- attr(gty, "filter.samples")
if (!is.null(attr(gty, "filter.sites")))
samples <- attr(gty, "filter.sites")
names(samples) <- colnames(gty)
names(sites) <- rownames(gty)
return(list(samples = samples, sites = sites))
}
summarize.filters <- function(gty, ...) {
filters <- get.filters(gty)
sapply(filters, sum, na.rm = TRUE)
}
rez <- run.qc.checks(geno, max.H = 5000, max.N = 2000)
summarize.filters(rez)
get.filters <- function(gty, ...) {
if (!inherits(gty, "genotypes"))
stop("Please supply an object of class 'genotypes'.")
sites <- rep(FALSE, nrow(gty))
samples <- rep(FALSE, ncol(gty))
if (!is.null(attr(gty, "filter.samples")))
samples <- attr(gty, "filter.samples")
if (!is.null(attr(gty, "filter.sites")))
sites <- attr(gty, "filter.sites")
names(samples) <- colnames(gty)
names(sites) <- rownames(gty)
return(list(samples = samples, sites = sites))
}
summarize.filters <- function(gty, ...) {
filters <- get.filters(gty)
sapply(filters, sum, na.rm = TRUE)
}
summarize.filters(rez)
get.filters <- function(gty, ...) {
if (!inherits(gty, "genotypes"))
stop("Please supply an object of class 'genotypes'.")
sites <- rep(FALSE, nrow(gty))
samples <- rep(FALSE, ncol(gty))
if (!is.null(attr(gty, "filter.samples")))
samples <- attr(gty, "filter.samples")
if (!is.null(attr(gty, "filter.sites")))
sites <- attr(gty, "filter.sites")
names(samples) <- colnames(gty)
names(sites) <- rownames(gty)
return(list(sites = sites, samples = samples))
}
summarize.filters <- function(gty, ...) {
filters <- get.filters(gty)
sapply(filters, sum, na.rm = TRUE)
}
summarize.filters(rez)
attributes(rez)
source('~/Dropbox/pmdvlab/util/R/geno.R')
geno$filter.samples
source('~/Dropbox/pmdvlab/util/R/geno.R')
geno$filter.samples
rez$filter.samples
rez$intensity
str(rez$intensity)
x <- unclass(geno.to.matrix(intens, .snps, value.col = "x"))
y <- unclass(geno.to.matrix(intens, .snps, value.col = "y"))
attr(geno, "intensity") <- list(x = x, y = y)
str(rez$intensity)
as.matrix(geno$intensity$x)
class(geno$intensity$x)
mostattributes(geno$intensity$x) <- NULL
geno <- geno.to.matrix(intens, .snps)
x <- unclass(geno.to.matrix(intens, .snps, value.col = "x"))
y <- unclass(geno.to.matrix(intens, .snps, value.col = "y"))
source('~/Dropbox/pmdvlab/util/R/geno.R')
samples(geno)
source('~/Dropbox/pmdvlab/util/R/geno.R')
samples(geno)
markers(geno)
source('~/Dropbox/pmdvlab/util/R/geno.R')
source('~/Dropbox/pmdvlab/util/R/geno.R')
filters(rez)
filters(rez)$samples
filters(rez)$sites
source('~/Dropbox/pmdvlab/util/R/geno.R')
intensity(rez)
source('~/Dropbox/pmdvlab/util/R/geno.R')
source('~/Dropbox/pmdvlab/util/R/geno.R')
source('~/Dropbox/pmdvlab/util/R/geno.R')
source('~/Dropbox/pmdvlab/util/R/geno.R')
source('~/Dropbox/pmdvlab/util/R/geno.R')
source('~/Dropbox/pmdvlab/util/R/geno.R')
library(devtools)
setwd("~/Dropbox/pmdvlab/argyle/")
document()
install.packages("roxygen2")
document()
document()
